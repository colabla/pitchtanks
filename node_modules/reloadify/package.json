{
  "name": "reloadify",
  "version": "0.2.1",
  "description": "A live-reload NPM module that works well with your raw Node / Express servers. CLI version available as well.",
  "main": "server.js",
  "bin": {
    "reloadify": "bin/cli.js"
  },
  "scripts": {
    "test": "node test/functional.js",
    "start": "node server.js",
    "lint": "eslint lib/*.js examples/*.js",
    "precommit": "npm run lint"
  },
  "author": {
    "name": "Alexandru Vladutu",
    "email": "alexandru.vladutu@gmail.com",
    "url": "http://careers.stackoverflow.com/alessioalex"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/alessioalex/reloadify.git"
  },
  "license": "MIT",
  "keywords": [
    "live",
    "reload",
    "live-reload",
    "livereload",
    "sync",
    "refresh"
  ],
  "dependencies": {
    "chokidar": "^1.0.2",
    "debug-app": "^1.0.0",
    "dezalgo": "^1.0.3",
    "errto": "^0.2.1",
    "generic-middleware": "^0.1.1",
    "get-port": "^1.0.0",
    "inject-html": "^1.0.1",
    "lodash.throttle": "^3.0.3",
    "minimist": "^1.1.1",
    "on-finished": "^2.3.0",
    "sendevent": "~1.0.2",
    "serve-index": "^1.7.2",
    "serve-static": "^1.10.0",
    "uglify-js": "~2.4.15"
  },
  "devDependencies": {
    "eslint": "^0.23.0",
    "husky": "^0.8.1",
    "selenium-webdriver": "^2.46.1",
    "server-destroy": "^1.0.1",
    "tape": "^4.0.0"
  },
  "readme": "# reloadify\r\n\r\nNode module that refreshes the browser(s) when your static resources have changed.\r\n\r\nUse it with your Node http / Express server without needing anything else (NO BROWSER PLUGINS, NO MANUALLY INJECTING CODE into your pages).\r\n\r\n## usage\r\n\r\n`reloadify` is installable via `npm` and can be used in 3 possible ways:\r\n\r\n1) along with your existing Node server (or Express, etc)\r\n\r\n2) standalone, as a live reloading static file server\r\n\r\n3) as a CLI app, using 2)\r\n\r\n### integrating it with your Node server\r\n\r\nRegular [Node http](https://nodejs.org/api/http.html#http_class_http_server):\r\n\r\n```js\r\n// initializing it with the watched folder\r\n// (you can also pass an array of multiple folders)\r\nvar reloadify = require('reloadify')(__dirname + '/public');\r\n\r\nhttp.createServer(function(req, res) {\r\n  // Express style signature: `reloadify(request, response, next)`\r\n  reloadify(req, res, function() {\r\n    // do stuff afterwords\r\n    if (req.url === '/') {\r\n      fs.readFile(__dirname + '/views/home.html', 'utf8', function(err, content) {\r\n        res.writeHead(200, { 'Content-Type': 'text/html' });\r\n        res.end(content + '\\n');\r\n      });\r\n    } else {\r\n      res.writeHead(404, { 'Content-Type': 'text/html' });\r\n      res.end('Page Not Found\\n');\r\n    }\r\n  });\r\n}).listen(1337);\r\n```\r\n\r\n[Express](http://expressjs.com/):\r\n\r\n```js\r\nvar reloadify = require('../')(__dirname + '/views');\r\napp.use(reloadify);\r\n```\r\n\r\nYou can find complete examples inside the `/examples` folder.\r\n\r\n### live reloading static file server\r\n\r\n```js\r\nvar reloadify = require('reloadify');\r\nvar folder = __dirname + '/public';\r\nvar port = 8080;\r\nvar hasSilentLogger = false;\r\n\r\nreloadify.serve(folder, port, hasSilentLogger);\r\n```\r\n\r\n### cli app\r\n\r\nInstall it globally with `npm`:\r\n\r\n```bash\r\nnpm i reloadify -g\r\n```\r\n\r\nUsage:\r\n\r\n```\r\nUsage: reloadify {OPTIONS}\r\n\r\nOptions:\r\n\r\n      --port, -p  Port to start the server on.\r\n\r\n    --folder, -f  Folder to be watched for changes.\r\n\r\n    --silent, -s  Disable the logger.\r\n\r\n      --help, -h  Show this message.\r\n```\r\n\r\nExample:\r\n\r\n```sh\r\nreloadify -f myAppFolder -p 4000\r\n```\r\n\r\n## how does it work\r\n\r\nResponses are intercepted in order for a script to be injected into the page using [inject-html](https://github.com/alessioalex/inject-html).\r\nThis script will allow the browser to be notified by the server in realtime using [EventSource](http://www.html5rocks.com/en/tutorials/eventsource/basics/).\r\nThe server will send a message to the browser when watched files change, using [chokidar](https://www.npmjs.com/package/chokidar).\r\n\r\n## why build another refresh module?\r\n\r\n..when there are valid alternatives available, such as:\r\n\r\n### LiveReload\r\n\r\nI read the following about getting started with [LiveReload](http://livereload.com/):\r\n\r\n    1. It works with Safari, Chrome, Firefox and Mobile Safari. Also Opera if you enable web sockets.\r\n\r\n    2. Yes, you heard that right, LiveReload <3 iPhones, iPads and their Simulators if you insert a JavaScript snippet.\r\n\r\n    3. If adding a tag is not your thing, and you're only interested in desktop browsers, only on your computer, use our browser extensions.\r\n\r\nMy issues were the following: I wanted a tool that works in every browser without a plugin and without injecting a JavaScript snippet.\r\nSure, `LiveReload` has a wider scope and does not specifically care about the backend.\r\nHowever that wasn't my case, as I was working exclusively with Node.\r\n\r\n### Browsersync\r\n\r\n[Browsersync](http://www.browsersync.io/) is a great tool that does a lot of things and it's really easy to use.\r\n\r\nHowever I wanted something lighter that I could [easily integrate](https://github.com/BrowserSync/browser-sync/issues/154) with my existing Node / Express server.\r\n\r\n### Others\r\n\r\nAs much as I love reinventing the wheel, I also took a look at some other popular alternatives (besides the two previously mentioned) before creating my own thing:\r\n\r\n- [live-server](https://github.com/tapio/live-server) - \"A simple development http server with live reload capability.\"\r\n- [easy-livereload](https://github.com/dai-shi/easy-livereload) - \"Express middleware to use livereload2 easily (both server and client)\"\r\n\r\nThe first module works fine if you're only doing HTML / CSS / JS stuff, but I wanted something that integrates with an existing Node server.\r\nThe second module depends on `LiveReload`, so it's a no-go for the reasons listed before.\r\n\r\nLast but not least, it was fun.\r\n\r\n## tests\r\n\r\n```bash\r\nnpm i chromedriver -g\r\nnode test/functional.js\r\n```\r\n\r\n(to be improved)\r\n\r\n## license\r\n\r\n[MIT](http://alessioalex.mit-license.org/)\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alessioalex/reloadify/issues"
  },
  "homepage": "https://github.com/alessioalex/reloadify",
  "_id": "reloadify@0.2.1",
  "_shasum": "2450ec4429d239e9c3836400e1cb2884e4d45f69",
  "_resolved": "https://registry.npmjs.org/reloadify/-/reloadify-0.2.1.tgz",
  "_from": "https://registry.npmjs.org/reloadify/-/reloadify-0.2.1.tgz"
}
